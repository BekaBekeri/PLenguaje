/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/

action code {:
  private LinkedList <String[]> outputs = new LinkedList<String[]>();
  private LinkedList <String> languages = new LinkedList<String>();
  private LinkedList <String> automatons = new LinkedList<String>();
  private LinkedList <String[]> states = new LinkedList<String[]>();
  private LinkedList <String[]> transitions = new LinkedList<String[]>();
  private String initial;
  private PrintWriter writer = null;

  private void writeAuxiliar(String pack){
  try {
  writer = new PrintWriter("State.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\npublic class State implements IState {\n\tprotected String name;\n\tprivate OutputInterface output;\n\n\tpublic State(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof State) {\n\t\t\treturn ((State) obj).name.equals(this.name);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic OutputInterface getOutput() {\n\t\treturn output;\n\t}\n\n\tpublic void setOutput(OutputInterface output) {\n\t\tthis.output = output;\n\t}\n}",pack));
writer.close();
try {
  writer = new PrintWriter("IState.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\npublic interface IState {\n\tString getName();\n\tvoid setName(String name);\n\tOutputInterface getOutput();\n\tvoid setOutput(OutputInterface output);\n}",pack));
writer.close();
try {
  writer = new PrintWriter("IMooreMachine.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.LinkedList;\n\npublic interface IMooreMachine {\n\tboolean addState(IState state);\n\tboolean addTransition(ITransition transition);\n\tboolean removeState(IState state);\n\tboolean removeTransition(ITransition transition);\n\n\tLinkedList<IState> getStates();\n\tIState getDestinationState(IState fromState, String input);\n\tLinkedList<ITransition> getTransitions();\n\tIState getInitialState();\n\tvoid setInitialState(IState initialState);\n\tvoid setInitialState(IState initialState, boolean overwrite);\n\n\tString getMachineName();\n\tvoid setMachineName(String name);\n}",pack));
writer.close();
try {
  writer = new PrintWriter("MooreMachine.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.LinkedList;\n\npublic class MooreMachine implements IMooreMachine {\n\tprotected LinkedList<IState> states;\n\tprotected LinkedList<ITransition> transitions;\n\tprotected String name;\n\tprotected IState initialState;\n\n\tpublic MooreMachine() {\n\t\tstates = new LinkedList<IState>();\n\t\ttransitions = new LinkedList<ITransition>();\n\t}\n\n\t@Override\n\tpublic boolean addState(IState state) {\n\t\tif (!hasState(state)) {\n\t\t\tstates.add(state);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\n\t}\n\n\t@Override\n\tpublic boolean addTransition(ITransition transition) {\n\t\tif (hasState(transition.getFromState()) && hasState(transition.getToState())) {\n\t\t\ttransitions.add(transition);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean removeState(IState state) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean removeTransition(ITransition transition) {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic LinkedList<IState> getStates() {\n\t\treturn this.states;\n\t}\n\n\t@Override\n\tpublic IState getDestinationState(IState originState, String input) {\n\t\tfor (ITransition t : transitions) {\n\t\t\tif (t.getFromState().equals(originState) && t.getInputs().contains(input))\n\t\t\t\treturn t.getToState();\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic LinkedList<ITransition> getTransitions() {\n\t\treturn this.transitions;\n\t}\n\n\t@Override\n\tpublic IState getInitialState() {\n\t\treturn this.initialState;\n\t}\n\n\t@Override\n\tpublic void setInitialState(IState initialState) {\n\t\tthis.setInitialState(initialState, false);\n\t}\n\n\t@Override\n\tpublic void setInitialState(IState initialState, boolean overwrite) {\n\t\tif (initialState == null && !overwrite) {\n\t\t\tthrow new RuntimeException(\"The initial state is already defined\");\n\t\t} else {\n\t\t\tthis.initialState = initialState;\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getMachineName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic void setMachineName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic boolean hasState(IState state) {\n\t\tfor (IState st : states) {\n\t\t\tif (state.equals(st))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}",pack));
writer.close();
try {
  writer = new PrintWriter("ITransition.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.LinkedList;\n\npublic interface ITransition {\n\tIState getFromState();\n\tvoid setFromState(IState fromState);\n\tIState getToState();\n\tvoid setToState(IState toState);\n\tLinkedList<String> getInputs();\n\tvoid setInputs(LinkedList<String> inputs);\n}",pack));
writer.close();
try {
  writer = new PrintWriter("Transition.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Transition implements ITransition {\n\tprotected IState fromState;\n\tprotected IState toState;\n\tprotected LinkedList<String> inputs;\n\n\tpublic Transition(IState fromState, IState toState) {\n\t\tthis.setFromState(fromState);\n\t\tthis.setToState(toState);\n\t\tthis.inputs = new LinkedList<String>();\n\t}\n\n\tpublic Transition(IState fromState, IState toState, String input) {\n\t\tthis.setFromState(fromState);\n\t\tthis.setToState(toState);\n\t\tthis.inputs = new LinkedList<String>();\n\t\tthis.inputs.add(input);\n\t}\n\n\tpublic Transition(IState fromState, IState toState, LinkedList<String> inputs) {\n\t\tthis.setFromState(fromState);\n\t\tthis.setToState(toState);\n\t\tthis.inputs = inputs;\n\t}\n\n\tpublic Transition(IState fromState, IState toState, String[] inputs) {\n\t\tthis(fromState, toState, new LinkedList<String>(Arrays.asList(inputs)));\n\t}\n\n\tpublic IState getFromState() {\n\t\treturn fromState;\n\t}\n\n\tpublic void setFromState(IState fromState) {\n\t\tthis.fromState = fromState;\n\t}\n\n\tpublic IState getToState() {\n\t\treturn toState;\n\t}\n\n\tpublic void setToState(IState toState) {\n\t\tthis.toState = toState;\n\t}\n\n\tpublic LinkedList<String> getInputs() {\n\t\treturn inputs;\n\t}\n\n\tpublic void setInputs(LinkedList<String> inputs) {\n\t\tthis.inputs = inputs;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof Transition) {\n\t\t\tTransition t = (Transition) obj;\n\t\t\treturn this.getFromState().equals(t.getFromState()) &&\n\t\t\t\t\tthis.getToState().equals(t.getToState()) &&\n\t\t\t\t\tthis.getInputs().containsAll(t.getInputs());\n\t\t}\n\t\treturn false;\n\t}\n}",pack));
writer.close();
try {
  writer = new PrintWriter("MachineController.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.LinkedList;\n\npublic class MachineController {\n\tprivate IMooreMachine machine;\n\tprivate MachineSimulator simulator;\n\tprivate %s environment;\n\n\tpublic MachineController(IMooreMachine machine) {\n\t\tthis.machine = machine;\n\t\tthis.simulator = new MachineSimulator(machine);\n\t\tthis.environment = new %s();\n\t}\n\n\tpublic LinkedList<IState> getStates() {\n\t\treturn machine.getStates();\n\t}\n\n\tpublic LinkedList<ITransition> getTransitions() {\n\t\treturn machine.getTransitions();\n\t}\n\n\tpublic %s getEnvironment() {\n\t\treturn environment;\n\t}\n\n\tpublic IState getInitialState() {\n\t\treturn machine.getInitialState();\n\t}\n\n\tpublic IState getTransitionDestination(String stateName, String input) {\n\t\tIState originState = new State(stateName);\n\t\treturn machine.getDestinationState(originState, input);\n\t}\n\n\tpublic IState addNewInput(Object input) {\n\t\tboolean transitioned = simulator.addNewInput(environment.translate(input));\n\t\tif (transitioned)\n\t\t\treturn simulator.getCurrentState();\n\t\telse\n\t\t\treturn null;\n\t}\n\n\tpublic IState removeInput() {\n\t\treturn simulator.removeInput();\n\t}\n\n\tpublic IState getCurrentState() {\n\t\treturn simulator.getCurrentState();\n\t}\n\n\tpublic IState getPreviousState() {\n\t\treturn simulator.getPreviousState();\n\t}\n}",pack,pack,pack,pack));
writer.close();
try {
  writer = new PrintWriter("IEnvironment.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\npublic interface IEnvironment {\n\tString translate(Object input);\n}",pack));
writer.close();
try {
  writer = new PrintWriter("MachineSimulator.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.Stack;\n\npublic class MachineSimulator {\n\tprivate IMooreMachine machine;\n\tprivate IState currentState;\n\tprivate Stack<IState> previousStates = new Stack<>();\n\tprivate Stack<String> previousInputs = new Stack<>();\n\n\tpublic MachineSimulator(IMooreMachine machine) {\n\t\tthis.setMachine(machine);\n\t\tthis.currentState = this.machine.getInitialState();\n\t}\n\n\tpublic boolean addNewInput(String input) {\n\t\tIState destinationState = getMachine().getDestinationState(getCurrentState(), input);\n\t\tif (destinationState == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpreviousStates.push(currentState);\n\t\tpreviousInputs.push(input);\n\t\tsetCurrentState(destinationState);\n\t\t//getCurrentState().getOutput().run();\n\t\treturn true;\n\t}\n\n\tpublic IState removeInput() {\n\t\tif (!previousStates.isEmpty()) {\n\t\t\tpreviousInputs.pop();\n\t\t\tIState previousState = previousStates.pop();\n\t\t\tthis.currentState = previousState;\n\t\t\treturn previousState;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic IMooreMachine getMachine() {\n\t\treturn machine;\n\t}\n\n\tpublic void setMachine(IMooreMachine machine) {\n\t\tthis.machine = machine;\n\t}\n\n\tpublic IState getCurrentState() {\n\t\treturn currentState;\n\t}\n\n\tpublic void setCurrentState(IState currentState) {\n\t\tthis.currentState = currentState;\n\t}\n\n\tpublic IState getPreviousState() {\n\t\tif (previousStates.size() == 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn previousStates.peek();\n\t\t}\n\t}\n}",pack));
writer.close();
try {
  writer = new PrintWriter("GenericEnvironment.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\n\npublic class GenericEnvironment<T> implements IEnvironment<T> {\n\n\t@Override\n\tpublic String translate(T input) {\n\t\treturn input.toString();\n\t}\n\n}\n",pack));
writer.close();
try {
  writer = new PrintWriter("OutputInterface.java","UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
writer.println(String.format("package %s;\nimport java.util.function.Consumer;\n\n@FunctionalInterface\npublic interface OutputInterface extends Consumer<%s> {}",pack,pack));
writer.close();
  }

:}

/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/

terminal FLECHA;
terminal SEPARATOR;
terminal PAR_DERECHO;
terminal PAR_IZQUIERDO;
terminal LLAVE_IZQUIERDA;
terminal LLAVE_DERECHA;
terminal PUNTO_Y_COMA;
terminal ASIGNACION;
terminal COMA;
terminal AUTO;
terminal IN;
terminal OUT;
terminal TRANS;
terminal INI;
terminal STA;
terminal DEF;
terminal ENV;
terminal String IDENT;
terminal String EVENTO;
terminal String CODIGO;
non terminal program;
non terminal String environment;
non terminal l_output;
non terminal String [] output;
non terminal l_define;
non terminal define;
non terminal entrada;
non terminal salida;
non terminal l_evento_fact;
non terminal String l_evento;
non terminal l_ident;
non terminal l_ident_fact;
non terminal l_automaton;
non terminal automaton;
non terminal states;
non terminal l_states;
non terminal l_states_fact;
non terminal initial;
non terminal transitions;
non terminal l_transitions;


/* -------------Declaracion de precedencias -----------*/



/* --------------Declaracion de la gramatica -----------*/

program
  ::= environment:env l_output l_define l_automaton {:
  writeAuxiliar(env);
  try {
    writer = new PrintWriter("Machines.java", "UTF-8");
  }catch( Exception e){
    e.printStackTrace();
  }
  writer.println(String.format("package %s;\n\n",env));
  writer.println("public class Machines {\n");
  for(int i=0;i<automatons.size();i++){
    writer.println(String.format("\tpublic static IMooreMachine %s(){\n\t\tMooreMachine machine = new MooreMachine();\n\t\tmachine.setMachineName(\"%s\");",automatons.get(i),automatons.get(i)));
    for(int j=0;j<states.size();j++){
      String out = "";
      for(int k=0;k<outputs.size();k++){
        if(outputs.get(k)[0].equals(states.get(j)[1])){
          out=outputs.get(k)[1];
          out=out.replace("\n","\n\t\t");
          break;
        }
      }
      writer.println(String.format("\n\t\tState %s = new State(\"%s\");\n\t\t%s.setOutput((%s env) -> %s);\n\t\tmachine.addState(%s);",states.get(j)[0],states.get(j)[0],states.get(j)[0],env,out.substring(2,out.length()-2).replace(";","").replace("\n", "").replace("\r", "").replace(" ", ""),states.get(j)[0]));
    }
    int tranCount = 0;
    for(int j=0;j<transitions.size();j++){
      tranCount+=1;
      writer.println(String.format("\n\t\tTransition t%d = new Transition (%s,%s,\"%s\");\n\t\tmachine.addTransition(t%d);",tranCount,transitions.get(j)[0],transitions.get(j)[1],transitions.get(j)[2],tranCount));
    }
    writer.println(String.format("\n\t\tmachine.setInitialState(%s);",initial));
    writer.println("\n\t\treturn machine;\n\t}");
  }
  writer.println("\n}");
  writer.close();
  :}
  ;

environment
  ::= ENV ASIGNACION IDENT:i PUNTO_Y_COMA {:RESULT=i;:}
  ;

l_output
  ::= output:o l_output
  | ;

output
  ::= IDENT:i ASIGNACION CODIGO:c PUNTO_Y_COMA
  {:
  String [] s = new String [2];
  s[0]=i;
  s[1]=c;
  outputs.add(s);
  RESULT = s;
  :}
  ;

l_define
  ::= define l_define
  | ;

define
  ::= DEF IDENT LLAVE_IZQUIERDA entrada salida LLAVE_DERECHA
  ;


entrada
  ::= IN ASIGNACION l_evento PUNTO_Y_COMA
  ;

salida
  ::= OUT ASIGNACION l_ident PUNTO_Y_COMA
  ;

l_evento
  ::= EVENTO:e l_evento_fact {:RESULT=e;:}
  ;

l_evento_fact
  ::= COMA l_evento
  | ;

l_ident
  ::= IDENT l_ident_fact
  ;

l_ident_fact
  ::= COMA l_ident
  | ;

l_automaton
  ::= automaton l_automaton
  | ;

automaton
  ::= AUTO IDENT:i PAR_IZQUIERDO IDENT PAR_DERECHO LLAVE_IZQUIERDA states initial transitions LLAVE_DERECHA {:automatons.add(i);:}
  ;

states
  ::= STA ASIGNACION l_states PUNTO_Y_COMA
  ;

l_states
  ::= IDENT:i SEPARATOR IDENT:c l_states_fact {:  String [] s = new String [2];
    s[0]=i;
    s[1]=c;
    states.add(s);:}
  ;

l_states_fact
  ::= COMA l_states
  | ;

initial
  ::= INI ASIGNACION IDENT:i PUNTO_Y_COMA {:initial=i;:}
  ;

transitions
  ::= TRANS LLAVE_IZQUIERDA l_transitions LLAVE_DERECHA
  ;

l_transitions
  ::= IDENT:i SEPARATOR l_evento:e FLECHA IDENT:c PUNTO_Y_COMA l_transitions {:
    String [] s = new String [3];
    s[0]=i;
    s[1]=c;
    s[2]=e;
    transitions.add(s);:}
  | ;
